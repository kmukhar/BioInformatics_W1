package com.mukhar;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

import java.io.File;
import java.util.ArrayList;

import org.junit.Test;

import com.mukhar.commons.LineDataReader;

public class PatternFinderTest {
	String input = "CGCCCGAATCCAGAACGCATTCCCATATTTCGGGACCACTGGCCTCCACGGTACGGACGTCAATCAAAT";
	String pattern = "ATTCTGGA";
	int[] expected = new int[] { 6, 7, 26, 27 };

	@Test
	public void testFindApproxMatches01() {
		assertEquals(0, PatternFinder.countMismatches("A", "A"));
	}

	@Test
	public void testFindApproxMatches02() {
		assertEquals(1, PatternFinder.countMismatches("A", "B"));
	}

	@Test
	public void testFindApproxMatches03() {
		int maxWrong = 1;
		assertArrayEquals(new int[] { 0, 1, 2 },
				PatternFinder.closeMatches("A", "ABA", maxWrong));
	}

	@Test
	public void testFindApproxMatches04() {
		int maxWrong = 1;
		assertArrayEquals(new int[] { 0, 1 },
				PatternFinder.closeMatches("AA", "ABA", maxWrong));
	}

	@Test
	public void testFindApproxMatches05() {
		int maxWrong = 3;
		assertArrayEquals(expected,
				PatternFinder.closeMatches(pattern, input, maxWrong));
	}

	@Test
	public void testFindApproxMatches06() {
		LineDataReader ldr = new LineDataReader();
		File f = new File("src/com/mukhar/approximate_match_data.txt");
		ldr.openFile(f);
		ArrayList<String> lines = ldr.readFile(4);
		Integer maxWrong = new Integer(lines.get(2));
		String[] e = lines.get(3).split(" ");
		int[] exp = new int[e.length];
		for (int i = 0; i < e.length; i++)
			exp[i] = Integer.parseInt(e[i]);

		assertArrayEquals(
				exp,
				PatternFinder.closeMatches(lines.get(0), lines.get(1),
						maxWrong.intValue()));
	}

	@Test
	public void testFindApproxMatches07() {
		LineDataReader ldr = new LineDataReader();
		File f = new File("src/com/mukhar/dataset_8_3b.txt");
		ldr.openFile(f);
		ArrayList<String> lines = ldr.readFile(3);
		Integer mw = new Integer(lines.get(2));

		int[] exp = PatternFinder.closeMatches(lines.get(0), lines.get(1),
				mw.intValue());
		for (int i : exp)
			System.out.print(i + " ");
	}

	@Test
	public void testFindApproxMatches08() {
		LineDataReader ldr = new LineDataReader();
		File f = new File("src/com/mukhar/dataset_8_3b.txt");
		ldr.openFile(f);
		ArrayList<String> lines = ldr.readFile(3);
		Integer mw = new Integer(lines.get(2));

		int[] actual = PatternFinder.closeMatches(lines.get(0), lines.get(1),
				mw.intValue());
		int[] expected = new int[] { 6, 35, 59, 87, 88, 96, 116, 132, 258, 281,
				303, 324, 329, 333, 337, 345, 358, 379, 380, 414, 440, 455,
				478, 502, 519, 571, 605, 614, 615, 629, 630, 634, 638, 663,
				735, 759, 761, 769, 772, 773, 776, 843, 868, 882, 901, 915,
				1031, 1066, 1070, 1078, 1100, 1107, 1108, 1148, 1156, 1159,
				1177, 1183, 1184, 1207, 1213, 1217, 1247, 1255, 1264, 1265,
				1283, 1296, 1333, 1373, 1405, 1406, 1414, 1424, 1461, 1559,
				1566, 1570, 1576, 1606, 1615, 1622, 1637, 1650, 1652, 1677,
				1714, 1718, 1746, 1775, 1776, 1778, 1784, 1801, 1877, 1938,
				1951, 1955, 1979, 2046, 2070, 2078, 2112, 2206, 2233, 2307,
				2309, 2317, 2318, 2321, 2368, 2370, 2400, 2409, 2410, 2439,
				2454, 2455, 2469, 2479, 2487, 2598, 2607, 2614, 2671, 2680,
				2696, 2700, 2704, 2767, 2771, 2796, 2798, 2800, 2838, 2900,
				2924, 2953, 2957, 2981, 2990, 3020, 3031, 3032, 3083, 3110,
				3113, 3120, 3143, 3151, 3198, 3259, 3263, 3293, 3312, 3326,
				3339, 3358, 3369, 3384, 3386, 3388, 3404, 3407, 3428, 3445,
				3446, 3564, 3574, 3589, 3590, 3591, 3601, 3610, 3622, 3634,
				3715, 3785, 3804, 3831, 3835, 3860, 3864, 3874, 3875, 3878,
				3888, 3905, 3909, 3912, 3913, 3944, 3954, 3989, 3990, 4012,
				4016, 4049, 4056, 4068, 4113, 4133, 4141, 4145, 4164, 4181,
				4185, 4254, 4335, 4378, 4426, 4433, 4471, 4484, 4488, 4505,
				4542, 4570, 4626, 4638, 4645, 4646, 4658, 4678, 4694, 4697,
				4703, 4741, 4770, 4807, 4811, 4812, 4842, 4850, 4858, 4923,
				4934, 4990, 5025, 5033, 5057, 5065, 5090, 5141, 5145, 5157,
				5331, 5344, 5345, 5365, 5373, 5377, 5386, 5412, 5428, 5438,
				5456, 5475, 5488, 5492, 5508, 5522, 5532, 5541, 5582, 5592,
				5595, 5609, 5687, 5700, 5739, 5740, 5791, 5827, 5831, 5867,
				5868, 5874, 5904, 5930, 6000, 6012, 6030, 6054, 6055, 6056,
				6058, 6073, 6086, 6114, 6139, 6143, 6151, 6164, 6168, 6172,
				6191, 6214, 6236, 6237, 6247, 6270, 6299, 6307, 6309, 6327,
				6329, 6340, 6362, 6366, 6388, 6410, 6412, 6423, 6441, 6443,
				6445, 6522, 6541, 6560, 6561, 6611, 6613, 6617, 6621, 6630,
				6664, 6675, 6686, 6699, 6739, 6769, 6795, 6797, 6799, 6809,
				6823, 6837, 6846, 6869, 6881, 7023, 7030, 7053, 7059, 7081,
				7108, 7109, 7133, 7136, 7150, 7170, 7183, 7184, 7205, 7227,
				7228, 7238, 7248, 7278, 7324, 7331, 7340, 7348, 7371, 7383,
				7411, 7449, 7463, 7481, 7523, 7542, 7553, 7573, 7574, 7575,
				7609, 7613, 7617, 7621, 7666, 7689, 7720, 7743, 7760, 7764,
				7786, 7794, 7808, 7831, 7839, 7860, 7870, 7871, 7936, 8008,
				8047, 8065, 8068, 8096, 8097, 8098, 8115, 8151, 8155, 8178,
				8198, 8199, 8257, 8284, 8285, 8327, 8356, 8418, 8435, 8448,
				8452, 8496, 8500, 8512, 8542, 8550, 8572, 8592, 8690, 8699,
				8715, 8723, 8803, 8804, 8855, 8863, 8887, 8902, 8921, 8931,
				8956, 8958, 8969, 8977, 8999, 9022, 9053, 9068, 9070, 9093,
				9102, 9103, 9125, 9126, 9136, 9148, 9176, 9189, 9197, 9230,
				9234, 9263, 9279, 9317, 9325, 9343, 9366, 9413, 9417, 9446,
				9450, 9468, 9500, 9503, 9517, 9540, 9541, 9542, 9559, 9569,
				9573, 9583, 9617, 9631, 9632, 9708, 9711, 9712, 9742, 9754,
				9758, 9762, 9770, 9827, 9860, 9868, 9880, 9884, 9888, 9892,
				9920, 9939, 9943, 9945, 9949, 9955, 10019, 10035, 10058, 10062,
				10114, 10134, 10224, 10239, 10289, 10335, 10381, 10405, 10418,
				10431, 10437, 10463, 10522, 10536, 10616, 10632, 10657, 10661,
				10691, 10692, 10724, 10734, 10735, 10754, 10834, 10859, 10871,
				10936, 10940, 10951, 10960, 10984, 11003, 11030, 11040, 11070,
				11078, 11090, 11091, 11109, 11167, 11187, 11201, 11209, 11212,
				11242, 11268, 11269, 11272, 11293, 11297, 11301, 11326, 11415,
				11430, 11432, 11434, 11473, 11497, 11534, 11535, 11551, 11553,
				11555, 11597, 11641, 11656, 11663, 11709, 11710, 11711, 11719,
				11760, 11764, 11787, 11827, 11855, 11857, 11859, 11871, 11889,
				11901, 11903, 11905, 11907, 11909, 12004, 12012, 12020, 12034,
				12054, 12063, 12105, 12128, 12142, 12156, 12157, 12198, 12209,
				12271, 12273, 12281, 12285, 12321, 12347, 12363, 12366, 12403,
				12407, 12415, 12432, 12437, 12444, 12476, 12490, 12538, 12546,
				12550, 12567, 12572, 12576, 12580, 12583, 12587, 12602, 12603,
				12606, 12640, 12663, 12667, 12675, 12676, 12685, 12699, 12703,
				12727, 12731, 12735, 12749, 12759, 12760, 12772, 12775, 12817,
				12819, 12830, 12863, 12880, 12884, 12895, 12976, 12980, 13005,
				13013, 13033, 13051, 13077, 13081, 13091, 13095, 13119, 13132,
				13136, 13160, 13185, 13193, 13213, 13245, 13277, 13319, 13352,
				13353, 13384, 13399, 13450, 13467, 13502, 13503, 13534, 13548,
				13559, 13569, 13573, 13583, 13603, 13654, 13664, 13704, 13706,
				13715, 13719, 13723, 13752, 13762, 13777, 13778, 13800, 13809,
				13813, 13819, 13859, 13863, 13881, 13882, 13902, 13919, 13998,
				14007, 14027, 14028, 14055, 14074, 14091, 14093, 14095, 14117,
				14151, 14161, 14162, 14198, 14210, 14280, 14294, 14316, 14407,
				14415, 14470, 14479, 14528, 14532, 14550, 14637, 14641, 14643,
				14647, 14654, 14728, 14729, 14744, 14820, 14968, 14969, 15008,
				15016, 15083, 15087, 15106, 15109, 15110, 15114, 15129, 15170,
				15182, 15183, 15215, 15242, 15246, 15309, 15351, 15359, 15382,
				15429, 15453, 15466, 15487, 15504, 15506, 15515, 15568, 15572,
				15592, 15620, 15624, 15715, 15718, 15787, 15798, 15838, 15861,
				15880, 15884, 15905, 15921, 15946, 15954, 15960, 15973, 16009,
				16033, 16034, 16062, 16063, 16084, 16086, 16122, 16126, 16153,
				16168, 16169, 16190, 16215, 16241, 16244, 16245, 16249, 16253,
				16259, 16266, 16288, 16335, 16398, 16438, 16448, 16452, 16477,
				16478, 16497, 16501 };

		assertArrayEquals(expected, actual);

		for (int i : actual)
			System.out.print(i + " ");
	}
}
