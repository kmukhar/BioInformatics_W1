package com.mukhar;

public class PatternFinder {
	static String input = "TCGGCAACTCTCATTCTAAGATGATCGGCAATCGGCAATGTAGTTCGGCAAGGTCGGCAAAGATACTCGGCAATCGGCAAATCGGCAAACCGCTCGGCAATCGGCAATTGACTCGGCAACTATCACTCGGCAAGAGTAACTCGGCAATCGGCAAATCTCGGCAACGGCCGCGTTTGTCGGCAATTGCTCGGCAATCGGCAAGCTCGGCAATCGGCAATAACTCGGCAATTCGGCAACTCGGCAATCGGCAATTTCGGCAATCGGCAAAAATCGGCAATCGGCAAAGACTAAGTCGGCAAACCATAATTCGGCAACCATGTTCCGCTCGGCAATGGATCGGCAATCGGCAATCGGCAAACCTCGGCAAGCAATCGGCAATCCACCTACATGCCTCGGCAACTTCGTTTTTCGGCAAATCGGCAAGACGCTCGGCAAGTCTCGGCAAAGCTTGCTTCGGCAACTCGGCAAGTATCGGCAACGATCGGCAATCGGCAATCGGCAAAGGTCGGCAACTGGGTCATTTCGGCAATCGGCAATAGCATCGGCAAGGGTTCGGCAAATATTCGGCAAGCCTCGGCAATCGGCAACTAGGATCGGCAATCGGCAATCGGCAACTCGGCAAATCGGCAAGAATTGTAGCGAGCCACTCGGCAATGGAGAAATATCGGCAAATCGGCAACCCATCGGCAATTTCCGAATTCGGCAATCGGCAAGCAAAATCGGCAATCGGCAATGCTTCGGCAATCATATCGGCAATCGGCAAAGCTCTCGGCAATCGGCAAGTCGGCAAAGTCGGCAATCCTCGGCAATCTCGGCAAATCGGCAACGTTCGGCAACATCGGCAATCGGCAATTCGGCAAATCGGCAACGTTTCGGCAAGAAGAATAGACAAATCGGCAAATCGGCAATCGGCAATCGGCAAGTTCGGCAAACGTTCGGCAATGAGCACCTAGATCGGCAAACCCCGGTCGGCAATCGGCAAACTGGGTTCGGCAAGGTCGGCAATCTTCTCGGCAAGTTTCGGCAATCGGCAATCGGCAAAGGTCGGCAATCGGCAATCGGCAATGAGTCGGCAATCGGCAATCGGCAACATCGGCAATCGGCAAGTTACCTCGGCAATAGCTTCGGCAAGACTATTCGGCAATCGGCAAAATTCGGATCGGCAAAATCGGCAATTCGGCAACTCGGCAATCCTCTCGGCAAACTCGGCAATCGGCAATCGGCAACGTCACGCTATCGGCAATCGGCAATCGGCAATCGGCAAGCACTCGGCAATCGGCAAGAGTATCGGCAACTCGGCAAATATATCGGCAAGTCGGCAAACTCGGCAATGTGGTGCTCGGCAATCGGCAAAGAGGTCGGCAACTCTCGGCAACAGAGATCGGCAAATCTTCGGCAAGCGTCTCGGCAATATCGGCAACATCAGTCGGCAAGTCACTTGTCGGCAAAATGTTTTCGCATCGGCAACTCGGCAAGTCGGCAAGTCGGCAAAGGCCAATCGGCAACTTAGCTGACAATCGGCAACTTCGGCAAGTTCGGCAATTCGGCAAGAGTCGGCAAATCGGCAATTCAGTCGGCAAGATCGGCAAAATCGGCAATCGGCAATCGGCAATCGGCAATCGGCAAAAAGGACAGTCGGCAAAAATCGGCAATCGCCCGGTTCGGCAACTCTCGGCAACCAACTCGGCAAACTCGGCAAAAATTCGGCAAATCGGCAATCGGCAACCACCATCGGCAATCGGCAAAATGTCGGCAACAGGTATCTCGGCAAAACATCGGCAACAGTCGGCAATCGGCAATGTTCGGCAAGTTTTCGGCAATTCGGCAAATCGGCAATATACAGGTTTCGGCAAGTTCCGTGGAGGCTCGGCAATGTGGTGCGCTCGGCAATCGGCAACATCGGCAATTCGGCAAGTACATATCGGCAAGGCTCGGCAATCGGCAATCGGCAACTTGGGTCGGCAACTCGGCAACTCGGCAATCGGCAATCGGCAACGTTTCGGCAATTTCGGCAATCGGCAATGGGGGTCGGCAACATTCGGCAATCCCCAATCGGCAAGGCGGTTATCGGCAATCGGCAATCGGCAACTGTCGGCAATCGGCAAACGTCGGCAATCGGCAATCGGCAATCGGCAATCGGCAATCGGCAATCGGCAATAGGGTCGGCAATGTGTCGGCAATCGGCAACTCGGCAATTAATTCGGCAATTCGGCAATCGGCAAGTCGGCAATCGGCAACATATAACCGTCTAGAATTCGGCAAGTCGGCAATAACCTCGGCAACCGTCGGCAATCGGCAACTAAAGATCGGCAAGGTCGGCAAGGATATCGGCAAATGTCGGCAAGTCGGCAACCCTCGGCAATTCGGCAATCGGCAATCGGCAAATCGGCAACAGATCTCGGCAAGTGCGGATAGATCGGCAATCGGCAATCGGCAATTCGGCAATCGGCAAACGTCGGCAACCGTTCTCGGCAATCGGCAATCGGCAATCGGCAATCGGCAATCGGCAAAGAGATCGGCAACCGTCGGCAACTGGATCGGCAACATCGGCAATCGGCAATTCGGCAATCGGCAAACGCTCGGCAATCGGCAAAGTCGGCAATCGGCAAGATCGGCAATCTCGGCAATCGGCAAGTCGGCAATCGGCAATTCGGCAAGGCTCGGCAATCGGCAAAAGCTTTCGGCAAATCGGCAATATCGGCAAATGTGGTCGGCAAGGCGTGATTCGGCAATTCGGCAATTTCGGCAATTCGGCAATCGGCAATCGGCAAGTCGGCAATCCATCGGCAACTGTCGGCAATCGGCAATCGGCAAATTCTCGGCAACTCGGCAAAAAGTCGGCAATGGAAGTTCGGCAATCGGCAATCGGCAATTCGGCAATCGGCAATTCGGCAAGCCGTCGGCAATACGGTCGGCAACACGGAGCATGCTGTCGGCAATCGGCAAGCGCAGTCTTCAAAGTGGCTCGGCAAACCCTCGGCAAATCGGCAATTGCTTCGGCAACCATCGGCAAGGGTGTTGTCGGCAAACCTCGGCAAAGGTTCGGCAATTATCGGCAATCGGCAATCGGCAATCGGCAATTGGAGATATTCGGCAATAGCTCGGCAACGTACTCGGCAAGATCGGCAAGGATCGGCAAAGTTGTCGGCAATATGCTCGGCAATCGGCAAGTCGGCAATCGGCAATACTCCTGGGTCGACATCGGCAATTGATCGGCAATTTCGGCAATCGGCAACGTCTCGGCAACAACGCGCGTGACATACTTCATCGGCAACATCGGCAACTGTTCGGCAATTCGGCAAGTCGGCAACATCGGCAATCGGCAAACCGCTCGGCAATCGGCAAAATCGGCAATCGGCAACTCCAAATGTTCGGCAAATCGGCAAACGTTCGGCAATCGGCAAGTCGGCAAAGTCGGCAATTTCGGCAATGTCGGCAATTCGGCAAGGGTCGGCAATCGGCAATCGGCAACATCGGCAATCGGCAAATCGGCAATCGGCAACTCGGCAAATATTCGGCAACTTAGTCGGCAAGTCGGCAACCCTAGTCGGCAATTCAGGTCGGCAACGGGTATCGGCAACTTATCATTCGGCAAGGACGTCGGCAACCTCGGCAAGTTGTCCTTAATCGGCAAGTCGGCAATGATCGGCAAGCATCGGCAAGATCGGCAAGTCTCGGCAATCGGCAACCGATCGGCAATCGGCAAAGATCGGCAAAGCGTCGGCAAGACCTCGGCAACTCGGCAACTTTCGGCAACTCGGCAATCGCTCGGCAATTCGGCAACTTTCGGCAATCGGCAATTCGGCAACTCGGCAAAGCATCCCCTCGGCAAAGCTTCGGTCGGCAACCATTCGGCAAATCGGCAAGACTCGGCAATCGGCAATCGGCAAAGGTATCGGCAAGTCGGCAACATATTCGGCAAACGTCGGCAATCGGCAAGAAGTCGGCAATTCGGCAATCGGCAACGTCGGCAAGTCGGCAAATTTATATCGGCAATCGGCAAATCGGCAATTCGGCAAAGCTCGGCAACTCATATCGGCAATCGGCAATCGGCAAGCTTCTTGTATCGACGTGGTCGGCAAAACGCTCGGCAATCGGCAAGAATCGGCAATGAGTCGGCAATCGGCAAAGCATAGTCATTTTCGGCAATCGGCAATCGGCAATACATCGGCAAATCGGCAATCGGCAAATCGGCAATGATTGTCGGCAATCGGCAATCGGCAACACAGCAATCGGCAATCGGCAATAATTCGGCAACCCTCGGCAATTCGGCAATATCGGCAATTCGGCAAGCAATTCAGGCTCGGCAACTCGGCAATCGGCAAAATCGTCGGCAAAGTGCGGTCGGCAAATTGTGGACTCGGCAATCGGCAACTGTTAGTGTCGGCAAGGCTGCTCGGCAACTCGGCAAACATTATTCGGCAAGATCGGCAATCGGCAACTTCGGCAATCGGCAATCGGCAATTCGGCAAGCCTCGGCAATTTCGGCAAGTTGGCATCTCGGCAATGTGAGTCGGCAATCGGCAAAACTCTCGGCAAATCTCTCGGCAATCGGCAAGTCGGCAATCGGCAAAATCGGCAATAGTCGGCAAGAGCTCGGCAAATCGGCAAATCGGCAAACTCGGCAACATTCGGCAATTTCGGCAAGCATCGGCAAGGATCGGCAAAAGTTAGCTTGGTCGGCAAGTCGGCAATTCGTCGGCAATCGGCAACTTCTACAACTCGGCAATGTATGGATTCGGCAATAGCGATCGGCAACTCGGCAAATTATCGGCAATCGGCAACGTCGGCAACCTCGGCAAACCCCTATGCTCGGCAACTCGGCAAAGTCGGCAAACGTTCGGCAATGCGCTCTTGACGTGAGTCGGCAATCGGCAAAGTTTCGGCAAGATCGGCAATCGGCAATCTCGGCAAATCGGCAATCGGCAATCGGCAAAGCGACACGGGCTCGGCAAGGCGAGTCGGCAATCGGCAATTTCGGCAATCTCGGCAATCTATCGGCAACTCGGCAATCGGCAAACGTCGGCAATCGGCAACTCGGCAATCAATATAGTATCGGCAACAAGTCGGCAAAACTCGGCAATGTCGGCAAGTCGGCAAACCATCGGCAAGAGTTCGGCAATCGGCAAATCGGCAAGTGAAGTATCGGCAATGTCTCGGCAATCGGCAATCGGCAACATCGGCAATCGGCAATTAAACGTCGGCAATCGGCAAGTCGGCAACGTGCGTATCGGCAATCGGCAATTCGGCAAGTCGGCAATCGGCAATCGGCAATCGTCGGCAATTCGGCAATCGGCAAGTCGGCAAGCTCGGCAATCGGCAATCGGCAATCGGCAACTTCGGCAAATGTTCGGCAAGGCTCGGCAATCGGCAACCCTCGGCAATCGGCAAGGACGGTGAAACTTCTCGGCAATCGGCAAGACGGTATGTCGGCAATTCGGCAACTCGGCAATCCCGTCGGCAACTCGGCAAGTCTCGGCAAGATACATGTCGGCAATCGGCAATCGGCAATCGGCAATCGGCAACAATGTCGGCAACCCTTTTCGGCAATCGGCAAGATCGGCAATTTCGGCAACCTCGGCAATATCGGCAATTTCGGCAAACTCGGCAACACACTTCGGCAATCGGCAACATCTGTCGGCAATCGGCAACAATCGGCAACTCGGCAATCTCGGCAATCGGCAAATCGGCAATCGGCAATCGGCAAGAATGTGGTTCGGCAAAATTCGGCAACCAAAATCGATCGGCAAGTTGGCTCGGCAATTGATCGGCAATCGGCAAGGACTCGGCAATCGGCAATCGGCAATCGGCAAGCTCGGCAATAATCGGCAAAGTTTCGGCAATCGGCAATCGGCAAACTCGGCAACTCGGCAATCGGCAAGTTGTCGGCAATATCGGCAATACCATACTCGGCAATCGGCAACGTCGGCAACATTCTCGGCAATGAATCGGCAACTCGGCAACAACTAAGTCGGCAACATTCGGCAACACTAACTCGGCAACTATTTGCCTTCGGCAACTATCGGCAACTCGGCAAGTATCGGCAAGAAGCTCTGCTCGGCAACATCGGCAATCGGCAAATCGGCAACATTCGGCAATCGGCAACTTCGGCAATATTCGGCAAGTCGGCAAAGTTCGGCAATCGGCAAGTCGGCAATCGGCAATCGGCAATCGGCAATCGGCAACCCGGTCGGCAATCGGCAATTCTCGGCAATCGGCAATAGTCGGCAACGCCGGCGATCGGCAAGTCGGCAATCGGCAATCGGCAAATCGGCAATTCGGCAATACGACGGAATAAAGCCTGTCGGCAACTCGGCAACCACCAGATTCGGCAAAGATCGGCAATCGGCAAATTCGGCAAGTTCGGCAACTCGGCAATTCGGCAAATCGGCAAACTCGGCAAAGTCGGCAACCAGCGCTCTCGGCAACGGGTGTCGGCAACTTCGGCAACTTAAGTGATTCGGCAATCTGTCTCGGCAATGTCGGCAAGTCGGCAAGAATCAAGCTCTCTCGGCAACCCGTCGGCAATCGGCAATCGGCAAGTCGGCAACGTTCGGCAACGTTCGGCAACTTCGGCAAGAATCGGCAAATCGGCAACTCGGCAACCGTTCGGCAATCCGTTCGGCAAGTGCAATACTCGGCAACGTCGGCAATCGGCAATTCGGCAAGGTCGGCAACGTAAGCTCGGCAACTCGGCAATCGGCAACTCGGCAATTTTCGGCAATCGGCAACTGTTCGGCAACTCGGCAATTCGGCAATAATTCATCGGCAATCGGCAAGCACATTCTGAACTCGGCAAACTCGGCAAAATCGGCAATCGGCAAGCTCGGCAAGCGAAGGCTCGGCAACTCGGCAAAGTGTCGGCAACCCCCAATCGGCAATCGGCAAGTTCGGCAATCGGCAAGATTCGGCAAGTCGGCAACCTCGTCGGCAATCGGCAATGCGTTCGGCAACCATCGGCAATCGGCAACTCGGCAATCGGCAATCGGCAAGCGTGGTCGATCGGCAATCGGCAACATCGGCAATCGGCAATTCGGCAACTGTTTCGGCAACTGGTCGTATTAAAACTACGCTCGGCAACGTAATCGGCAAGCTCGGCAACTCGGCAACGTACGAAACGTCGGCAATCCGAGCCAGTCGGCAAACAATCGGCAATCGGCAAATCTTCGGCAAAGTCGGCAACTCGGCAAGTTCGGCAATCGGCAATCGGCAATGTCGGCAATGGTTTCGGCAATCAGACCTCGGCAAAACTAGCTCGGCAATCGGCAAGGAACTGTCATCGGCAATTAGTCCGTCGGCAAATTCGGCAATCGGCAAATCGGCAAGGCTCGGCAAAATTCGGCAACGAATCGGCAAGTTTCGTCGGCAAATTAGATCGGCAATCGGCAAAGTCGGCAATCGGCAAATATTCGGCAATCGGCAAGAGTCGGCAAGCTTTCGGCAACTCCTCTTCGGCAACCATCATAATTCGGCAATCGGCAAAATGTCGGCAATCGGCAATCGGCAATGTCGGCAATCGGCAATTCGGCAAAGACCAGTCCATGTCGGCAATCGGCAACGCATCGGCAAGTCGGCAAGCACGACAGCTCGGCAAATACTCGGCAATGGTCGGCAACCGGTCGGCAAGTTCGGCAACTCGGCAAGACTCGGCAAGTCGGCAACAGCTCGGCAATCGGCAATCGGCAAGTCGGCAATCTCGGCAAGGTTATATGCTCGGCAATCGGCAAATATTCGGCAACCTGGTACTCGGCAAGTTTCGGCAATCGGCAACTCGGCAAGTCGGCAATCGGCAATCGGCAATGTCGGCAATCGGCAAGTGGGCCCACGATCGGCAATCGGCAAAAGTCGGCTCGGCAACACCCAATCGGCAAATCGGCAAGGGTCCTCGGCAATGACTCGGCAAGCTCGGCAACTTCGGCAAAGTCGGCAAATTCGGCAATGTGTCGGCAAGTTTCGGCAAAGAAAATAACTACCGATCGGCAAGCCAGTCGGCAATTTCCTCTCTCGGCAATCGGCAAAATCGGCAATCGGCAAAATCCCGGCCTCGGCAACTTGGTTCGGCAATCGGCAAATCGGCAAATCGGCAATCGGCAATCGGCAATCGGCAATCGGCAATCGGCAATCGGCAACGTGGCATTCGGCAATCGGCAAGCAGCCCACTCGGCAATCGGCAACATCGGCAACTCGGCAACCTCGGCAATCGGCAAGCCGCAATCGGCAAGCTCGGCAACTCGGCAACTCGGCAAACTGAATCGGCAATATCGGCAATCGGCAATGTCGGCAATCATCGGCAATCGGCAACTCGGCAAGGTCGGCAATCGGCAATTCGGCAAGATCGGCAACTCGGCAAGTCGTAACTCGGCAAGATCGGCAATCCAATTTCGGCAAGTAATCGGCAATTCGGCAAAACAGTCGGCAAGTCCCTCGGCAAGAGTTCGGCAATTCGGCAATTCGGCAATCGGCAATTCGGCAACGGCACTTCGGCAATCGGCAAGTCCCATAGGGGGCGCTCGGCAAAATCGGCAAGTCGGCAATCGGCAATCGGCAATTCGGCAATCGGCAATAGGGCTCGGCAAAGCTCGGCAATTTATCGGCAATACCGGACGCAAGTCGGCAAACGCTCGGCAACCATCGGCAACCCAATTTCGGCAACTCGGCAACCGTCTCGGCAAGCCAACTGTCGGCAACCCCGCAAGTCCTCGGCAAGGTCGGCAAAGGCAGTCCATCGGCAATCGGCAACGTCGGCAATCGGCAAATCGGCAAGTCGGCAACTTCGGCAATCGGCAAGCAGTCGGCAATCGGCAAATCAATCGGCAACTCGGCAAGATCGGCAAATCGGCAATAGCCTCGGCAATAGAGGTCGGCAATCGGCAATTCGGCAAATTCCTGGCTCGGCAACCCTCGGCAATCGGCAACGGTCGGCAATATTCGGCAAATCGGCAAATCGGCAATCGGCAACTTTCGGCAAAGTCGGCAAGGTCGGCAATGCAAGTGCCTCGGCAACCTCGGCAATCGGCAAACTTCGGCAAACGGTCGGCAATCGTGTTCGGCAATCTCGGCAATAGAGCAGGGTAATTCGGCAATTAATTCGGCAAGCTGTCGGAAGATCGGCAACATTCGGCAACGTCGGCAATTCGGCAAGGGATCGGCAAGACCTAATCGGCAACTCGGCAAATCGGCAAGATGTCGGCAAATCGGCAAGTCTCGGCAAGTTCGGCAATCGGCAACATCGGCAAATTTCGGCAATCTCGGCAATCGGCAACGCATATCGGCAATACCGCTCGGCAATCGGCAATTCGGCAACCTCGGCAATTCGCATTTCGGCAACGGGCTATCGGCAATCGGGTCGGCAAATCGGCAAGTCGGCAAGCTCGGCAATCGGCAACTCGGCAATCGGCAACGTCGGCAAGCGAAAGTCGGCAATTCGGCAACATCGGCAAGATCGGCAATTGTCGGCAACTATCGGCAAATATTTACTCGGCAAATTTTCGGCAAGAAGATAAGACATTCGGCAATCGGCAACGCGTCGGCAACGAATCGGCAAGTTCGGCAATCGTCGGCAATTCGGCAATCGGCAACTTTGTCGGCAACGGTCGGCAACGGATCGGCAAACTGTCGGCAACTTTCGGCAAATCGGCAAGCAACAATTTTCGGCAAGTCGGCAATCGGCAAACCCCTCGGCAAAGCGAATCGGCAATCGGCAAATCGGCAAGTCGGCAATCGGCAAGCGATCGGCAATCCAATACCCTGCTCGGCAAGTCGGCAATAAGTGTTCGGCAATCTCGGCAATTCGGCAATCGGCAATCGGCAATGTCGGCAATCGGCAAAAGTCGGCAATCGGCAACTCGGCAAACGTCGATTTCGGCAAATCGGCAAACGATTCGGCAAACC";
	static String pattern = "TCGGCAATC";

	public static void main(String[] args) {
		int index = PatternFinder.findNextIndex(input, pattern, 0);
		int count=0;
		while (index != -1) {
			System.out.print(index + " ");
			if (++count % 20 == 0)
				System.out.println();
			index = PatternFinder.findNextIndex(input, pattern, index+1);
		}
	}

	public static int findNextIndex(String input, String pattern, int i) {
		return input.indexOf(pattern, i);
	}
}
